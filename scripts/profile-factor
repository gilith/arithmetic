#!/usr/bin/perl

# Copyright (c) 2011 Joe Leslie-Hurd, distributed under the MIT license

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;

###############################################################################
# Process options.
###############################################################################

use vars qw($opt_t $opt_n $opt_k $opt_x $opt_h $opt_v);

$opt_n = 100;

getopts('t:n:k:x:hv');

if ($opt_h or scalar @ARGV != 0)
{
    pod2usage({-exitval => 2,
	       -verbose => 2});
}

# Autoflush STDIN
$|++;

###############################################################################
# Global variables.
###############################################################################

my $program = "profile-factor";

my $factor = "dist/build/arithmetic/arithmetic";
[ -x $factor ] or die "$program: $factor not an executable";

###############################################################################
# Helper functions.
###############################################################################

sub commify {
  local $_ = shift;
  1 while s/^(-?\d+)(\d{3})/$1,$2/;
  return $_;
}

###############################################################################
# How many bases are needed for the Williams p+1 factorization method?
###############################################################################

sub williams_bases_results {
  (scalar @_ == 2) or die;
  my $m = shift @_;
  my $cmdprefix = shift @_;

  print STDOUT "<tr>";

  print STDOUT "<td align=\"right\"><b>";
  print STDOUT $m;
  print STDOUT "</b></td>";

  for (my $x = 1; $x <= 8; ++$x) {
    print STDOUT "<td align=\"right\">";

    if ($cmdprefix eq "header") {
      print STDOUT "<b>";
      print STDOUT ("$x base" . ($x == 1 ? "" : "s"));
      print STDOUT "</b>";
    }
    else {
      my $cmd = "$cmdprefix -x $x -n [$m]";
      if ($opt_t) {
        $cmd = "(ulimit -t $opt_t ; $cmd)";
      }

      if ($opt_v) {
        print STDOUT "\n$cmd\n";
      }
      else {
        $cmd .= ' >/dev/null 2>/dev/null';
      }

      my $s = 0;

      for (my $j = 0; $j < $opt_n; $j++) {
        if (system($cmd) == 0) {
          $s++;
        }
      }

      my $p = (100 * $s) / $opt_n;
      $p = ($p < 10.0) ? sprintf("%.1f",$p) : sprintf("%.0f",$p);
      print STDOUT ($p . '%');
    }

    print STDOUT "</b></td>";
  }

  print STDOUT "</tr>\n";
}

sub williams_bases {
  (scalar @_ == 0) or die;

  print STDOUT "<h2>Williams p+1 Method (";
  if ($opt_k) { print STDOUT (commify($opt_k) . " primes, "); }
  if ($opt_t) { print STDOUT (commify($opt_t) . " second limit, "); }
  print STDOUT (commify($opt_n) . " samples)</h2>\n");
  print STDOUT "<table cellspacing=\"0\" cellpadding=\"4\" border=\"1\">\n";
  williams_bases_results ("|<i>n</i>|", "header");

  my $cmd = "$factor factor -a williams";
  if ($opt_k) { $cmd .= " -k $opt_k"; }
  for (my $m = 10; $m <= 100; $m += 10) {
    williams_bases_results ($m, $cmd);
  }
  print STDOUT "</table>\n";
}

###############################################################################
# What is the largest prime needed for the Williams p+1 factorization method?
###############################################################################

sub williams_primes_results {
  (scalar @_ == 2) or die;
  my $name = shift @_;
  my $cmd = shift @_;

  print STDOUT "<tr>";

  print STDOUT "<td align=\"right\"><b>";
  print STDOUT $name;
  print STDOUT "</b></td>";

  if ($cmd eq "header") {
    for (my $p = 0; $p <= 100; $p += 5) {
      print STDOUT "<td align=\"right\"><b>";
      print STDOUT $p;
      print STDOUT "%</b></td>";
    }
  }
  else {
    if ($opt_t) {
      $cmd = "(ulimit -t $opt_t ; $cmd)";
    }

    $cmd .= ' 2>&1';

    if ($opt_v) {
      print STDOUT "\n$cmd\n";
    }

    my @ps = ();

    for (my $j = 0; $j < $opt_n; $j++) {
      my @r = `$cmd`;

      if ($opt_v) {
        print STDOUT (join ("",@r));
      }

      if ($? == 0) {
        my $p = $r[0];
        chomp $p;
        if ($p =~ /^Williams p[+]1 method succeeded with prime ([[:digit:]]+)$/) {
          $p = int($1);
        }
        else {
          $p = 0;
        }
        push @ps, $p;
      }
    }
    my @xs = sort {$a <=> $b} @ps;

    for (my $p = 0; $p <= 100; $p += 5) {
      my $i = int(($opt_n * $p) / 100);
      if ($i != 0) { --$i; }
      my $p = "&mdash;";
      if ($i < scalar @xs) { $p = commify($xs[$i]); }
      print STDOUT "<td align=\"right\">";
      print STDOUT $p;
      print STDOUT "</td>";
    }
  }

  print STDOUT "</tr>\n";
}

sub williams_prime {
  (scalar @_ == 0) or die;

  print STDOUT "<h2>Williams p+1 Method (";
  if ($opt_x) { print STDOUT (commify($opt_x) . " base" . (($opt_x == 1) ? "" : "s") . ", "); }
  if ($opt_k) { print STDOUT (commify($opt_k) . " primes, "); }
  if ($opt_t) { print STDOUT (commify($opt_t) . " second limit, "); }
  print STDOUT (commify($opt_n) . " samples)</h2>\n");
  print STDOUT "<table cellspacing=\"0\" cellpadding=\"4\" border=\"1\">\n";
  williams_primes_results ("|<i>n</i>|", "header");

  my $cmd = "$factor factor -a williams";
  if ($opt_x) { $cmd .= " -x $opt_x"; }
  if ($opt_k) { $cmd .= " -k $opt_k"; }
  for (my $m = 10; $m <= 100; $m += 10) {
    williams_primes_results ("$m", ($cmd . " -n [$m]"));
  }
  print STDOUT "</table>\n";
}

###############################################################################
# Standard profile of the Williams p+1 factorization method.
###############################################################################

sub williams_profile {
  (scalar @_ == 0) or die;

  $opt_k = 1000;
  $opt_n = 10000;
  williams_bases();

  print STDOUT "\n";
  $opt_x = 5;
  $opt_k = 10000;
  williams_prime();
}

###############################################################################
# Main program.
###############################################################################

#williams_bases();
#williams_prime();
williams_profile();

__END__

=pod

=head1 NAME

profile-factor - profile the factoring algorithms

=head1 SYNOPSIS

profile-factor [-t N] [-n N] [-k N] [-hv]

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-t N>

Constrain each factoring attempt to be at most N seconds.

=item B<-n N>

Perform N factoring attempts for each bitwidth.

=item B<-k N>

Use the first N primes.

=item B<-x N>

Use N bases.

=item B<-h>

Produce this documentation.

=item B<-v>

Verbose output.

=back

=head1 DESCRIPTION

Profile the factoring algorithms.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Leslie-Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
